{"version":3,"sources":["components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","_useState","useState","_useState2","Object","slicedToArray","activeLink","setActiveLink","_useState3","_useState4","scrolled","setScrolled","useEffect","onScroll","window","scrollY","addEventListener","removeEventListener","onUpdateActiveLink","value","react_default","a","createElement","dist","Navbar","expand","className","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","App","NavBar_NavBar","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"wQAOaA,EAAS,WAAM,IAAAC,EACUC,mBAAS,QAAOC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA7CK,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GAAAK,EACAN,oBAAS,GAAMO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAE5BG,oBAAU,WACR,IAAMC,EAAW,WACXC,OAAOC,QAAU,GACnBJ,GAAY,GAEZA,GAAY,IAMhB,OAFAG,OAAOE,iBAAiB,SAAUH,GAE3B,kBAAMC,OAAOG,oBAAoB,SAAUJ,KACjD,IAEH,IAAMK,EAAqB,SAACC,GAC1BZ,EAAcY,IAGhB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAM,KACLH,EAAAC,EAAAC,cAACE,EAAA,EAAM,CAACC,OAAO,KAAKC,UAAWhB,EAAW,WAAa,IACrDU,EAAAC,EAAAC,cAACK,EAAA,EAAS,KACRP,EAAAC,EAAAC,cAACE,EAAA,EAAOI,MAAK,CAACC,KAAK,KAAG,sBACtBT,EAAAC,EAAAC,cAACE,EAAA,EAAOM,OAAM,CAACC,gBAAc,oBAC3BX,EAAAC,EAAAC,cAAA,QAAMI,UAAU,yBAElBN,EAAAC,EAAAC,cAACE,EAAA,EAAOQ,SAAQ,CAACC,GAAG,oBAClBb,EAAAC,EAAAC,cAACY,EAAA,EAAG,CAACR,UAAU,WACbN,EAAAC,EAAAC,cAACY,EAAA,EAAIC,KAAI,CACPN,KAAK,QACLH,UACiB,SAAfpB,EAAwB,qBAAuB,cAEjD8B,QAAS,kBAAMlB,EAAmB,UAAQ,QAI5CE,EAAAC,EAAAC,cAACY,EAAA,EAAIC,KAAI,CACPN,KAAK,UACLH,UACiB,WAAfpB,EAA0B,qBAAuB,cAEnD8B,QAAS,kBAAMlB,EAAmB,YAAU,UAI9CE,EAAAC,EAAAC,cAACY,EAAA,EAAIC,KAAI,CACPN,KAAK,YACLH,UACiB,aAAfpB,EACI,qBACA,cAEN8B,QAAS,kBAAMlB,EAAmB,cAAY,aAKlDE,EAAAC,EAAAC,cAAA,QAAMI,UAAU,eACdN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,OAChBN,EAAAC,EAAAC,cAAA,+CCzDDe,MATf,WACE,OACEjB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACgB,EAAM,QCIEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHpC,EAAAC,EAAAC,cAACF,EAAAC,EAAMoC,WAAU,KACfrC,EAAAC,EAAAC,cAACoC,EAAG,QAORnB","file":"static/js/main.3d4b04bd.chunk.js","sourcesContent":["import Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nexport const NavBar = () => {\n  const [activeLink, setActiveLink] = useState(\"home\");\n  const [scrolled, setScrolled] = useState(false);\n\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.scrollY > 50) {\n        setScrolled(true);\n      } else {\n        setScrolled(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", onScroll);\n\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, []);\n\n  const onUpdateActiveLink = (value) => {\n    setActiveLink(value);\n  };\n\n  return (\n    <Router>\n      <Navbar expand=\"md\" className={scrolled ? \"scrolled\" : \"\"}>\n        <Container>\n          <Navbar.Brand href=\"/\">Shiyan's Portfolio</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </Navbar.Toggle>\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"ms-auto\">\n              <Nav.Link\n                href=\"#home\"\n                className={\n                  activeLink === \"home\" ? \"active navbar-link\" : \"navbar-link\"\n                }\n                onClick={() => onUpdateActiveLink(\"home\")}\n              >\n                Home\n              </Nav.Link>\n              <Nav.Link\n                href=\"#skills\"\n                className={\n                  activeLink === \"skills\" ? \"active navbar-link\" : \"navbar-link\"\n                }\n                onClick={() => onUpdateActiveLink(\"skills\")}\n              >\n                Skills\n              </Nav.Link>\n              <Nav.Link\n                href=\"#projects\"\n                className={\n                  activeLink === \"projects\"\n                    ? \"active navbar-link\"\n                    : \"navbar-link\"\n                }\n                onClick={() => onUpdateActiveLink(\"projects\")}\n              >\n                Projects\n              </Nav.Link>\n            </Nav>\n            <span className=\"navbar-text\">\n              <button className=\"vvd\">\n                <span>Letâ€™s Connect</span>\n              </button>\n            </span>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </Router>\n  );\n};\n","import './App.css';\nimport React from 'react';\nimport { NavBar } from \"./components/NavBar\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}